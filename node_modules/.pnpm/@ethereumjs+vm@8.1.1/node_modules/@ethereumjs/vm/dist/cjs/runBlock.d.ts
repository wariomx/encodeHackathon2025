import { TransactionType } from '@ethereumjs/tx';
import { Account, Address } from '@ethereumjs/util';
import type { RunBlockOpts, RunBlockResult, TxReceipt } from './types.js';
import type { VM } from './vm.js';
import type { Common } from '@ethereumjs/common';
import type { EVMInterface } from '@ethereumjs/evm';
/**
 * @ignore
 */
export declare function runBlock(this: VM, opts: RunBlockOpts): Promise<RunBlockResult>;
/**
 * This method runs the logic of EIP 2935 (save blockhashes to state)
 * It will put the `parentHash` of the block to the storage slot of `block.number - 1` of the history storage contract.
 * This contract is used to retrieve BLOCKHASHes in EVM if EIP 2935 is activated.
 * In case that the previous block of `block` is pre-EIP-2935 (so we are on the EIP 2935 fork block), additionally
 * also add the currently available past blockhashes which are available by BLOCKHASH (so, the past 256 block hashes)
 * @param this The VM to run on
 * @param block The current block to save the parent block hash of
 */
export declare function accumulateParentBlockHash(this: VM, currentBlockNumber: bigint, parentHash: Uint8Array): Promise<void>;
export declare function accumulateParentBeaconBlockRoot(this: VM, root: Uint8Array, timestamp: bigint): Promise<void>;
export declare function calculateMinerReward(minerReward: bigint, ommersNum: number): bigint;
export declare function rewardAccount(evm: EVMInterface, address: Address, reward: bigint, common?: Common): Promise<Account>;
/**
 * Returns the encoded tx receipt.
 */
export declare function encodeReceipt(receipt: TxReceipt, txType: TransactionType): Uint8Array;
//# sourceMappingURL=runBlock.d.ts.map